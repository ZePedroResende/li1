<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Main</title><link href="ocean.css" rel="stylesheet" type="text/css" title="Ocean" /><script src="haddock-util.js" type="text/javascript"></script><script type="text/javascript">//<![CDATA[
window.onload = function () {pageLoad();setSynopsis("mini_Main.html");};
//]]>
</script></head><body><div id="package-header"><ul class="links" id="page-menu"><li><a href="index.html">Contents</a></li><li><a href="doc-index.html">Index</a></li></ul><p class="caption empty">&nbsp;</p></div><div id="content"><div id="module-header"><table class="info"><tr><th>Safe Haskell</th><td>Safe-Inferred</td></tr></table><p class="caption">Main</p></div><div id="synopsis"><p id="control.syn" class="caption expander" onclick="toggleSection('syn')">Synopsis</p><ul id="section.syn" class="hide" onclick="toggleSection('syn')"><li class="src short"><a href="#v:inStr">inStr</a> :: String -&gt; [String]</li><li class="src short"><a href="#v:outStr">outStr</a> :: [String] -&gt; String</li><li class="src short"><a href="#v:correTestes">correTestes</a> :: IO ()</li><li class="src short"><a href="#v:correTeste">correTeste</a> :: ([String] -&gt; [String]) -&gt; String -&gt; IO ()</li><li class="src short"><a href="#v:main">main</a> :: IO ()</li><li class="src short"><a href="#v:tarefa3">tarefa3</a> :: [String] -&gt; [String]</li><li class="src short"><a href="#v:caracterCaixa">caracterCaixa</a> :: [(Int, Int)] -&gt; [String] -&gt; [String] -&gt; [String]</li><li class="src short"><a href="#v:selecaoCaixa">selecaoCaixa</a> :: [String] -&gt; Int -&gt; Int -&gt; [String]</li><li class="src short"><a href="#v:transformaCaixa">transformaCaixa</a> :: String -&gt; Int -&gt; String</li><li class="src short"><a href="#v:validaUp">validaUp</a> :: (Int, Int) -&gt; [String] -&gt; String</li><li class="src short"><a href="#v:validaDown">validaDown</a> :: (Int, Int) -&gt; [String] -&gt; String</li><li class="src short"><a href="#v:validaLeft">validaLeft</a> :: (Int, Int) -&gt; [String] -&gt; String</li><li class="src short"><a href="#v:validaRight">validaRight</a> :: (Int, Int) -&gt; [String] -&gt; String</li><li class="src short"><a href="#v:carateresValidos">carateresValidos</a> :: Char -&gt; Bool</li><li class="src short"><a href="#v:converteCoords">converteCoords</a> :: Int -&gt; [String] -&gt; [(Int, Int, Int)]</li><li class="src short"><a href="#v:analiseCoords">analiseCoords</a> :: String -&gt; Bool</li><li class="src short"><a href="#v:algarismos-39-">algarismos'</a> :: String -&gt; Bool</li><li class="src short"><a href="#v:primeiros">primeiros</a> :: [(Int, Int, Int)] -&gt; [(Int, Int)]</li><li class="src short"><a href="#v:localizaCoords">localizaCoords</a> :: (Int, Int) -&gt; [String] -&gt; Char</li><li class="src short"><a href="#v:-33--33--33-">(!!!)</a> :: Eq a =&gt; [a] -&gt; Int -&gt; a</li></ul></div><div id="interface"><h1>Documentation</h1><div class="top"><p class="src"><a name="v:inStr" class="def">inStr</a> :: String -&gt; [String]</p></div><div class="top"><p class="src"><a name="v:outStr" class="def">outStr</a> :: [String] -&gt; String</p></div><div class="top"><p class="src"><a name="v:correTestes" class="def">correTestes</a> :: IO ()</p></div><div class="top"><p class="src"><a name="v:correTeste" class="def">correTeste</a> :: ([String] -&gt; [String]) -&gt; String -&gt; IO ()</p><div class="doc"><p>Corre um teste para uma tarefa</p></div></div><div class="top"><p class="src"><a name="v:main" class="def">main</a> :: IO ()</p></div><div class="top"><p class="src"><a name="v:tarefa3" class="def">tarefa3</a> :: [String] -&gt; [String]</p><div class="doc"><p>tarefa 3: valida se &#233; poss&#237;vel o boneco se movimentar tendo em conta tr&#234;s tipos de movimenta&#231;&#227;o: Cima, Baixo, Direita ou Esquerda  </p><p>O output desta tarefa &#233; simplesmente a nova coordenada do boneco, tendo em conta o seu tipo de movimenta&#231;&#227;o</p><ul><li>txt corresponde ao mapa completo (tabuleiro+coordenada)</li><li>mapa corresponde ao tabuleiro</li><li>stringCoords corresponde as Coordenadas (lista de strings)</li><li>comandoMapa corresponde ao comando dado. Este comando &#233; lido junto com o mapa, sendo que est&#225; por baixo de todas as coordenadas.
  &#201; chamada a fun&#231;&#227;o stringCoords, que seleciona todas a lista das coordenadas mais o comando, e usamos a fun&#231;&#227;o last para obter o comando.</li><li>posInicialBoneco &#201; a coordenada da posi&#231;&#227;o inicial do boneco. Esta &#233; a primeira das coordenadas que est&#227;o logo ap&#243;s o mapa. Por essa mesma raz&#227;o,
  usou-se a fun&#231;&#227;o head para obter o primeiro elemento.</li><li>validaCima valida se o boneco pode mover-se para cima</li><li>validaBaixo valida se o boneco pode mover-se para baixo</li><li>validaEsquerda valida se o boneco pode mover-se para a esquerda</li><li>validaDireita valida se o boneco pode mover-se para a direita</li></ul></div></div><div class="top"><p class="src"><a name="v:caracterCaixa" class="def">caracterCaixa</a> :: [(Int, Int)] -&gt; [String] -&gt; [String] -&gt; [String]</p></div><div class="top"><p class="src"><a name="v:selecaoCaixa" class="def">selecaoCaixa</a> :: [String] -&gt; Int -&gt; Int -&gt; [String]</p></div><div class="top"><p class="src"><a name="v:transformaCaixa" class="def">transformaCaixa</a> :: String -&gt; Int -&gt; String</p></div><div class="top"><p class="src"><a name="v:validaUp" class="def">validaUp</a> :: (Int, Int) -&gt; [String] -&gt; String</p><div class="doc"><p>A fun&#231;&#227;o validaUp vai validar o movimento do boneco, quando este quer mover-se para cima.
   Nesta fun&#231;&#227;o, utiliza-se a fun&#231;&#227;o localizaCoords, que localiza uma coordenada no mapa.
   Posto isto, verificamos se, somando uma coordenada no y, ou seja, somando 1 valor para que ele possa subir, se &#233; v&#225;lido ou n&#227;o.
   O boneco s&#243; se pode movimentar se, na posi&#231;&#227;o em frente estiver um espa&#231;o ou um ponto (o espa&#231;o corresponde simplesmente a um espa&#231;o vazio e o ponto a uma posi&#231;&#227;o final de uma caixa).
   Se a posi&#231;&#227;o em frente n&#227;o for nem um espa&#231;o nem um ponto, a &#250;nica alternativa &#233; ser uma caixa <code>H</code>.
   Se isto acontecer, o boneco consegue arrastar a caixa, o que faz com que a sua posi&#231;&#227;o mude. 
   Mas, se estiverem duas caixas seguidas, o boneco n&#227;o as consegue arrastar e, por sua vez, n&#227;o se consegue movimentar.
   Verifica-se ent&#227;o, somando 2 valores ao y, se existem um espa&#231;o ou ponto, para onde uma poss&#237;vel caixa se pode mover.
   Se sim, a coordenada do boneco muda, sen&#227;o mantem-se igual, e a jogada &#233; inv&#225;lida.</p></div></div><div class="top"><p class="src"><a name="v:validaDown" class="def">validaDown</a> :: (Int, Int) -&gt; [String] -&gt; String</p><div class="doc"><p>A fun&#231;&#227;o validaDown vai validar o movimento do boneco, quando este quer mover-se para baixo.
   Nesta fun&#231;&#227;o, utiliza-se a fun&#231;&#227;o localizaCoords, que localiza uma coordenada no mapa.
   Posto isto, verificamos se, subtraindo uma coordenada no y, ou seja, subtraindo 1 valor para que ele possa descer, se &#233; v&#225;lido ou n&#227;o.
   O boneco s&#243; se pode movimentar se a posi&#231;&#227;o atr&#225;s for um espa&#231;o ou um ponto. Se a posi&#231;&#227;o atr&#225;s n&#227;o for nem um espa&#231;o nem um ponto, a &#250;nica alternativa &#233; ser uma caixa <code>H</code>.
   Se isto acontecer, o boneco consegue arrastar a caixa, o que faz com que a sua posi&#231;&#227;o mude. 
   Mas, se estiverem duas caixas seguidas, o boneco n&#227;o as consegue arrastar e, por sua vez, n&#227;o se consegue movimentar.
   Verifica-se ent&#227;o, subtraindo 2 valores ao y, se existem um espa&#231;o ou ponto, para onde uma poss&#237;vel caixa se pode mover.
   Se sim, a coordenada do boneco muda, sen&#227;o mantem-se igual, e a jogada &#233; inv&#225;lida.</p></div></div><div class="top"><p class="src"><a name="v:validaLeft" class="def">validaLeft</a> :: (Int, Int) -&gt; [String] -&gt; String</p><div class="doc"><p>A fun&#231;&#227;o validaLeft vai validar o movimento do boneco, quando este quer mover-se para a esquerda.
   Nesta fun&#231;&#227;o, utiliza-se a fun&#231;&#227;o localizaCoords, que localiza uma coordenada no mapa.
   Posto isto, verificamos se, subtraindo uma coordenada no x, ou seja, subtraindo 1 valor para que ele possa andar para a esquerda, se &#233; v&#225;lido ou n&#227;o.
   O boneco s&#243; se pode movimentar se, na posi&#231;&#227;o &#224; esquerda estiver um espa&#231;o ou um ponto. Se a posi&#231;&#227;o &#224; esquerda n&#227;o for nem um espa&#231;o nem um ponto, a &#250;nica alternativa &#233; ser uma caixa <code>H</code>.
   Se isto acontecer, o boneco consegue arrastar a caixa, o que faz com que a sua posi&#231;&#227;o mude. 
   Mas, se estiverem duas caixas seguidas, o boneco n&#227;o as consegue arrastar e, por sua vez, n&#227;o se consegue movimentar.
   Verifica-se ent&#227;o, subtraindo 2 valores ao x, se existem um espa&#231;o ou ponto, para onde uma poss&#237;vel caixa se pode mover.
   Se sim, a coordenada do boneco muda, sen&#227;o mantem-se igual, e a jogada &#233; inv&#225;lida.</p></div></div><div class="top"><p class="src"><a name="v:validaRight" class="def">validaRight</a> :: (Int, Int) -&gt; [String] -&gt; String</p><div class="doc"><p>A fun&#231;&#227;o validaRight vai validar o movimento do boneco, quando este quer mover-se para a direita.
   Nesta fun&#231;&#227;o, utiliza-se a fun&#231;&#227;o localizaCoords, que localiza uma coordenada no mapa.
   Posto isto, verificamos se, somando uma coordenada no x, ou seja, somando 1 valor para que ele possa andar para a direita, se &#233; v&#225;lido ou n&#227;o.
   O boneco s&#243; se pode movimentar se, na posi&#231;&#227;o &#224; direita estiver um espa&#231;o ou um ponto. Se a posi&#231;&#227;o a direita n&#227;o for nem um espa&#231;o nem um ponto, a &#250;nica alternativa &#233; ser uma caixa <code>H</code>.
   Se isto acontecer, o boneco consegue arrastar a caixa, o que faz com que a sua posi&#231;&#227;o mude. 
   Mas, se estiverem duas caixas seguidas, o boneco n&#227;o as consegue arrastar e, por sua vez, n&#227;o se consegue movimentar.
   Verifica-se ent&#227;o, somando 2 valores ao x, se existem um espa&#231;o ou ponto, para onde uma poss&#237;vel caixa se pode mover.
   Se sim, a coordenada do boneco muda, sen&#227;o mantem-se igual, e a jogada &#233; inv&#225;lida.</p></div></div><div class="top"><p class="src"><a name="v:carateresValidos" class="def">carateresValidos</a> :: Char -&gt; Bool</p><div class="doc"><p>Carateres v&#225;lidos dentro da sec&#231;&#227;o do tabuleiro.
obs : vai ser utilizada para dividir o tabuleiro e as coordenadas em duas partes e para validar o mapa</p></div></div><div class="top"><p class="src"><a name="v:converteCoords" class="def">converteCoords</a> :: Int -&gt; [String] -&gt; [(Int, Int, Int)]</p><div class="doc"><p>Converte uma lista de Strings (stringCoords) em triplos (atrav&#233;s do processaPosicoes) .
 Em primeiro e segundo s&#227;o as coordenadas e o terceiro &#233; o contador, ou seja, valor dado na contagem dos erros</p></div></div><div class="top"><p class="src"><a name="v:analiseCoords" class="def">analiseCoords</a> :: String -&gt; Bool</p><div class="doc"><p>Testa se as coordenadas s&#227;o constitu&#237;das por um par de n&#250;meros </p></div></div><div class="top"><p class="src"><a name="v:algarismos-39-" class="def">algarismos'</a> :: String -&gt; Bool</p><div class="doc"><p>Primeiro d&#237;gito : vai retirar enquanto &#233; digito   
     Segundo digito :
                     1. Vai deixar retirar enquanto e digito de forma a retirar o primeiro digito ,
                     2. Ap&#243;s isso vai retirar o espa&#231;o vazio 
                     3. Retirar enquanto &#233; d&#237;gito</p></div></div><div class="top"><p class="src"><a name="v:primeiros" class="def">primeiros</a> :: [(Int, Int, Int)] -&gt; [(Int, Int)]</p><div class="doc"><p>A fun&#231;&#227;o primeiros tem como input a fun&#231;&#227;o converteCoords e retira o contador, deixando apenas pares correspondentes a coordenadas do mapa</p></div></div><div class="top"><p class="src"><a name="v:localizaCoords" class="def">localizaCoords</a> :: (Int, Int) -&gt; [String] -&gt; Char</p><div class="doc"><p>localizaCoords : recebe num par de coordenadas e localiza o caracter respetivo no mapa, confirmando que estas se encontram dentro do mapa (tabuleiro)</p></div></div><div class="top"><p class="src"><a name="v:-33--33--33-" class="def">(!!!)</a> :: Eq a =&gt; [a] -&gt; Int -&gt; a</p></div></div></div><div id="footer"><p>Produced by <a href="http://www.haskell.org/haddock/">Haddock</a> version 2.14.3</p></div></body></html>