module Main where

import qualified Data.Text as T
import Graphics.Gloss
import GlossExtras

main = do inp <- getContents
          let (x,y) = tarefa5 (readPicture inp)
          putStrLn (show (round x) ++ " " ++ show (round y))

	
p = (Pictures [Circle 20,Pictures [Blank,Translate 10.3 10.3 (Circle 20)]])

f = showPicture p 

tarefa5 :: Picture -> (Float, Float)
tarefa5 x = msg where
	string= showPicture x 
	msg = (2,2)


blank = (0,0)

choveBebados :: String -> String
choveBebados (h:t) = if h == '[' then (h:t) else choveBebados t 



calculaPicture :: Picture -> [(Float,Float)]
calculaPicture Blank = calculaBlank
calculaPicture Polygon pontos = calculaPolygon pontos
calculaPicture Line pontos = calculaLine pontos
calculaPicture Circle raio = calculaCircle raio
calculaPicture Bitmap x y BitmapData boolean = calculaBitmap x y 
calculaPicture Color cor imagem = calculaColor imagem
calculaPicture Translate floatX floatY imagem = calculaTranslate floatX floatY imagem
calculaPicture Rotate float imagem = calculaRotate float imagem
calculaPicture Scale floatX floatY imagem = calculaScale floatX floatY imagem
calculaPicture Pictures imagens = --recursividade



calculaPolygon :: [(Float,Float)] -> [(Float,Float)]
calculaPolygon pontos = [paiNatalMenorX, paiNatalMaiorX, paiNatalMenorY, paiNatalMaiorY]


calculaLine :: [(Float,Float)] -> [(Float,Float)]
calculaLine pontos = [((fst (head pontos)),0), ((snd (last pontos)),0), (0,(snd (head pontos))), (0,(snd (last pontos)))]


calculaCircle :: Float -> [(Float,Float)]
calculaCircle raio = [(-raio,0), (raio,0), (0,-raio), (0,raio)]


calculaBitmap :: Float -> Float -> [(Float,Float)]
calculaBitmap x y = [((-x / 2),0), ((x / 2),0) (0,(y / 2)), (0,(y / 2))]


calculaColor :: Picture -> [(Float,Float)]
calculaColor imagem | imagem == (Polygon pontos) = calculaPolygon pontos
                    | imagem == (Line pontos) = calculaLine pontos
                    | imagem == (Circle raio) = calculaCircle raio



calculaTranslate :: Float -> Float -> Picture -> [(Float,Float)]
calculaTranslate floatX floatY imagem | imagem == (Polygon pontos) = [((fst paiNatalMenorX) + floatX, (snd paiNatalMenorX) + floatY), ((fst paiNatalMaiorX) + floatX, (snd paiNatalMaiorX) + floatY), ((fst paiNatalMenorY) + floatX, (snd paiNatalMenorY) + floatY), ((fst paiNatalMaiorY) + floatX, (snd paiNatalMaiorY))]
                                      | imagem == (Line pontos) = [((fst (head pontos)) + floatX, floatY), ((snd (last pontos)) + floatX, floatY), (floatX, (snd (head pontos)) + floatY), (floatX, (snd (last pontos)) + floatY)]
                                      | imagem == (Circle raio) = [((-raio) + floatX, floatY), (raio + floatX, floatY), (floatX, (-raio) + floatY), (floatX, raio + floatY)]



calculaRotate :: Float -> Picture -> [(Float,Float)]
calculaRotate float imagem = undefined


calculaScale :: Float -> Float -> Picture -> [(Float,Float)]
calculaScale floatX floatY imagem = undefined









paiNatalMaiorX :: [(Float,Float)] -> (Float,Float)
paiNatalMaiorX ((x,y):t) = aux x ((x,y):t) where
	aux x [] = (x,0) 
	aux k ((x,y):t) = if k < x then aux x t else aux k t 


paiNatalMenorX :: [(Float,Float)] -> (Float,Float)
paiNatalMenorX ((x,y):t) = aux x ((x,y):t) where
	aux x [] = (x,0) 
	aux k ((x,y):t) = if k > x then aux x t else aux k t 


paiNatalMaiorY :: [(Float,Float)] -> (Float,Float)
paiNatalMaiorY ((x,y):t) = aux x ((x,y):t) where
	aux x [] = (0,x) 
	aux k ((x,y):t) = if k < y then aux y t else aux k t 

paiNatalMenorY :: [(Float,Float)] -> (Float,Float)
paiNatalMenorY ((x,y):t) = aux x ((x,y):t) where
	aux x [] = (0,x) 
	aux k ((x,y):t) = if k > y then aux y t else aux k t 



{-
Blank	
--blank picture, with nothing in it.

Polygon Path	
-- convex polygon filled with a solid color.

Line Path	
--line along an arbitrary path.

Circle Float	
--circle with the given radius.

ThickCircle Float Float	
--circle with the given thickness and radius. If the thickness is 0 then this is equivalent to Circle.

Arc Float Float Float	
--circular arc drawn counter-clockwise between two angles (in degrees) at the given radius.

ThickArc Float Float Float Float	
--circular arc drawn counter-clockwise between two angles (in degrees), with the given radius and thickness. If the thickness is 0 then this is equivalent to Arc.

Text String	
--text to draw with a vector font.

Bitmap Int Int BitmapData Bool	
--bitmap image with a width, height and some 32-bit RGBA bitmap data.

--boolean flag controls whether Gloss should cache the data between frames for speed. If you are programatically generating the image for each frame then use False. If you have loaded it from a file then use True.

CoBlank	
--blank picture, with nothing in it.

Polygon Path	
--convex polygon filled with a solid color.

Line Path	
--line along an arbitrary path.

Circle Float	
--circle with the given radius.


Bitmap Int Int BitmapData Bool	
--bitmap image with a width, height and some 32-bit RGBA bitmap data.
--boolean flag controls whether Gloss should cache the data between frames for speed. If you are programatically generating the image for each frame then use False. If you have loaded it from a file then use True.

Color Color Picture	
--picture drawn with this color.

Translate Float Float Picture	
--picture translated by the given x and y coordinates.

Rotate Float Picture	
--picture rotated clockwise by the given angle (in degrees).

Scale Float Float Picture	
--picture scaled by the given x and y factors.

Pictures [Picture]lor Color Picture	
--picture drawn with this color.

Translate Float Float Picture	
--picture translated by the given x and y coordinates.

Rotate Float Picture	
--picture rotated clockwise by the given angle (in degrees).

Scale Float Float Picture	
--picture scaled by the given x and y factors.

Pictures [Picture]
-}
